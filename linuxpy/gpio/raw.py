#
# This file is part of the linuxpy project
#
# Copyright (c) 2024 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by __main__
# Date: 2024-09-14 07:38:13.225082
# System: Linux
# Release: 6.8.0-44-generic
# Version: #44-Ubuntu SMP PREEMPT_DYNAMIC Tue Aug 13 13:35:26 UTC 2024

import enum

from linuxpy.ctypes import Struct, Union, cchar, cint, cuint, culonglong, u32
from linuxpy.ioctl import IOR as _IOR, IOWR as _IOWR


class GpioLineEvent(enum.IntEnum):
    REQUESTED = 1
    RELEASED = 2
    CONFIG = 3


class LineFlag(enum.IntFlag):
    USED = 1
    ACTIVE_LOW = 2
    INPUT = 4
    OUTPUT = 8
    EDGE_RISING = 16
    EDGE_FALLING = 32
    OPEN_DRAIN = 64
    OPEN_SOURCE = 128
    BIAS_PULL_UP = 256
    BIAS_PULL_DOWN = 512
    BIAS_DISABLED = 1024
    EVENT_CLOCK_REALTIME = 2048
    EVENT_CLOCK_HTE = 4096


class LineAttrId(enum.IntEnum):
    FLAGS = 1
    OUTPUT_VALUES = 2
    DEBOUNCE = 3


class LineChangedType(enum.IntEnum):
    REQUESTED = 1
    RELEASED = 2
    CONFIG = 3


class LineEventId(enum.IntEnum):
    RISING_EDGE = 1
    FALLING_EDGE = 2


class gpiochip_info(Struct):
    pass


gpiochip_info._fields_ = [("name", cchar * 32), ("label", cchar * 32), ("lines", cuint)]


class gpio_v2_line_values(Struct):
    pass


gpio_v2_line_values._fields_ = [("bits", culonglong), ("mask", culonglong)]


class gpio_v2_line_attribute(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("flags", culonglong), ("values", culonglong), ("debounce_period_us", cuint)]

    _anonymous_ = ("m1",)


gpio_v2_line_attribute._fields_ = [("id", cuint), ("padding", cuint), ("m1", gpio_v2_line_attribute.M1)]


class gpio_v2_line_config_attribute(Struct):
    pass


gpio_v2_line_config_attribute._fields_ = [("attr", gpio_v2_line_attribute), ("mask", culonglong)]


class gpio_v2_line_config(Struct):
    pass


gpio_v2_line_config._fields_ = [
    ("flags", culonglong),
    ("num_attrs", cuint),
    ("padding", cuint * 5),
    ("attrs", gpio_v2_line_config_attribute * 10),
]


class gpio_v2_line_request(Struct):
    pass


gpio_v2_line_request._fields_ = [
    ("offsets", cuint * 64),
    ("consumer", cchar * 32),
    ("config", gpio_v2_line_config),
    ("num_lines", cuint),
    ("event_buffer_size", cuint),
    ("padding", cuint * 5),
    ("fd", cint),
]


class gpio_v2_line_info(Struct):
    pass


gpio_v2_line_info._fields_ = [
    ("name", cchar * 32),
    ("consumer", cchar * 32),
    ("offset", cuint),
    ("num_attrs", cuint),
    ("flags", culonglong),
    ("attrs", gpio_v2_line_attribute * 10),
    ("padding", cuint * 4),
]


class gpio_v2_line_info_changed(Struct):
    pass


gpio_v2_line_info_changed._fields_ = [
    ("info", gpio_v2_line_info),
    ("timestamp_ns", culonglong),
    ("event_type", cuint),
    ("padding", cuint * 5),
]


class gpio_v2_line_event(Struct):
    pass


gpio_v2_line_event._fields_ = [
    ("timestamp_ns", culonglong),
    ("id", cuint),
    ("offset", cuint),
    ("seqno", cuint),
    ("line_seqno", cuint),
    ("padding", cuint * 6),
]


class gpioline_info(Struct):
    pass


gpioline_info._fields_ = [("line_offset", cuint), ("flags", cuint), ("name", cchar * 32), ("consumer", cchar * 32)]


class gpioline_info_changed(Struct):
    pass


gpioline_info_changed._fields_ = [
    ("info", gpioline_info),
    ("timestamp", culonglong),
    ("event_type", cuint),
    ("padding", cuint * 5),
]


class gpiohandle_request(Struct):
    pass


gpiohandle_request._fields_ = [
    ("lineoffsets", cuint * 64),
    ("flags", cuint),
    ("default_values", cchar * 64),
    ("consumer_label", cchar * 32),
    ("lines", cuint),
    ("fd", cint),
]


class gpiohandle_config(Struct):
    pass


gpiohandle_config._fields_ = [("flags", cuint), ("default_values", cchar * 64), ("padding", cuint * 4)]


class gpiohandle_data(Struct):
    _pack_ = True


gpiohandle_data._fields_ = [("values", cchar * 64)]


class gpioevent_request(Struct):
    pass


gpioevent_request._fields_ = [
    ("lineoffset", cuint),
    ("handleflags", cuint),
    ("eventflags", cuint),
    ("consumer_label", cchar * 32),
    ("fd", cint),
]


class gpioevent_data(Struct):
    pass


gpioevent_data._fields_ = [("timestamp", culonglong), ("id", cuint)]


class IOC(enum.IntEnum):
    CHIPINFO = _IOR(0xB4, 0x01, gpiochip_info)
    LINEINFO_UNWATCH = _IOWR(0xB4, 0x0C, u32)
    GET_LINEINFO = _IOWR(0xB4, 0x05, gpio_v2_line_info)
    GET_LINEINFO_WATCH = _IOWR(0xB4, 0x06, gpio_v2_line_info)
    GET_LINE = _IOWR(0xB4, 0x07, gpio_v2_line_request)
    LINE_SET_CONFIG = _IOWR(0xB4, 0x0D, gpio_v2_line_config)
    LINE_GET_VALUES = _IOWR(0xB4, 0x0E, gpio_v2_line_values)
    LINE_SET_VALUES = _IOWR(0xB4, 0x0F, gpio_v2_line_values)
    LINEINFO = _IOWR(0xB4, 0x02, gpioline_info)
    LINEHANDLE = _IOWR(0xB4, 0x03, gpiohandle_request)
    LINEEVENT = _IOWR(0xB4, 0x04, gpioevent_request)
    LINEINFO_WATCH = _IOWR(0xB4, 0x0B, gpioline_info)
